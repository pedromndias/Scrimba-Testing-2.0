// Let's import the data array from our data.js file:
import { tweetsData } from "./data.js";
// Let's import the uuid creation functionality:
import { v4 as uuidv4 } from "https://jspm.dev/uuid"

// The next event listener will listen for clicks on the document. Note the e.target.dataset so we know what element is clicked on. The dataset properties will also allow us to know what element they are connected to.
document.addEventListener("click", function(e){
    // If we click on the "like" button, we will call the handleLikeClick function. Same for the other buttons ("retweet" and "reply")
    if(e.target.dataset.like){
        handleLikeClick(e.target.dataset.like) 
     }
     else if(e.target.dataset.retweet){
         handleRetweetClick(e.target.dataset.retweet)
     }
     else if(e.target.dataset.reply){
         handleReplyClick(e.target.dataset.reply)
     }
     else if(e.target.id === 'tweet-btn'){
         handleTweetBtnClick()
     }
 })

// Let's implement the handleLikeClick function:
function handleLikeClick(tweetId){
    // Given the parameter (tweetId) let's create an object by filtering our tweetsData by that id:
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]

    // Now we check if the tweet is already liked or not, change the status and flip the boolean:
    if (targetTweetObj.isLiked){
        targetTweetObj.likes--
    }
    else{
        targetTweetObj.likes++ 
    }
    targetTweetObj.isLiked = !targetTweetObj.isLiked
    // Finally, we call the render() function
    render()
}

// The same functionality goes to the handleRetweetClick function:
function handleRetweetClick(tweetId){
    const targetTweetObj = tweetsData.filter(function(tweet){
        return tweet.uuid === tweetId
    })[0]
    
    if(targetTweetObj.isRetweeted){
        targetTweetObj.retweets--
    }
    else{
        targetTweetObj.retweets++
    }
    targetTweetObj.isRetweeted = !targetTweetObj.isRetweeted
    render() 
}

// The next function toggles the display of tweet's replies:
function handleReplyClick(replyId){
    // Note the dynamic id (it takes the replyId parameter so we can identify the reply and toggle the "hidden" class)
    document.getElementById(`replies-${replyId}`).classList.toggle('hidden')
}

// This function will post a new tweet when we click the tweet-btn
function handleTweetBtnClick(){
    // First, we control the input:
    const tweetInput = document.getElementById("tweet-input")

    // If there's a value on the input, we will create a new object and insert it on our tweetsData array.
    // Note the value for "tweetText" and "uuid" (generated by the important uuidv4() function)
    if(tweetInput.value){
        tweetsData.unshift({
            handle: `@Scrimba`,
            profilePic: `images/scrimbalogo.png`,
            likes: 0,
            retweets: 0,
            tweetText: tweetInput.value,
            replies: [],
            isLiked: false,
            isRetweeted: false,
            uuid: uuidv4()
        })
        render()
        tweetInput.value = ""
    }
}

// The getFeedHtml() will generate the HTML to be displayed for each tweet, reply, likes, retweets, etc:
function getFeedHtml(){
    let feedHtml = ``

    // Let's iterate through each tweet and get the data to generate the HTML to be displayed:
    tweetsData.forEach(function(tweet){
        
        // Let's manage the class to show the colored like:
        let likeIconClass = ""
        if (tweet.isLiked){
            likeIconClass = "liked"
        }

        // Let's manage the class to show the colored retweet:
        let retweetIconClass = ""
        if (tweet.isRetweeted){
            retweetIconClass = "retweeted"
        }

        // Let's check if the tweet has replies so we can show them if the reply button is clicked:
        let repliesHtml = ""
        if(tweet.replies.length > 0) {
            tweet.replies.forEach(function(reply){
                repliesHtml += `
                    <div class="tweet-reply">
                        <div class="tweet-inner">
                            <img src="${reply.profilePic}" class="profile-pic">
                                <div>
                                    <p class="handle">${reply.handle}</p>
                                    <p class="tweet-text">${reply.tweetText}</p>
                                </div>
                            </div>
                    </div>
                `
            })
        }

        // Now let's create the HTML for the feed itself.
        // Note the dataset: "data-reply", "data-like" and "data-retweet" that equal the tweet's id "tweet.uuid" so we can match the buttons with its tweet.
        // Also note the dynamic classes on the logo for the tweet's likes and replies.
        feedHtml += `
            <div class="tweet">
                <div class="tweet-inner">
                    <img src="${tweet.profilePic}" class="profile-pic">
                    <div>
                        <p class="handle">${tweet.handle}</p>
                        <p class="tweet-text">${tweet.tweetText}</p>
                        <div class="tweet-details">
                            <span class="tweet-detail">
                                <i class="fa-regular fa-comment-dots"
                                data-reply="${tweet.uuid}"
                                ></i>
                                ${tweet.replies.length}
                            </span>
                            <span class="tweet-detail">
                                <i class="fa-solid fa-heart ${likeIconClass}"
                                data-like="${tweet.uuid}"
                                ></i>
                                ${tweet.likes}
                            </span>
                            <span class="tweet-detail">
                                <i class="fa-solid fa-retweet ${retweetIconClass}"
                                data-retweet="${tweet.uuid}"
                                ></i>
                                ${tweet.retweets}
                            </span>
                        </div>   
                    </div>            
                </div>
                <div class="hidden" id="replies-${tweet.uuid}">
                    ${repliesHtml}
                </div>   
            </div>
        
        `

    })
    // This function will return the feed's HTML:
    return feedHtml
}

// Finally, we have the render() function, that gets the returned value from getFeedHtml and puts it as the innerHTML of the feed element:
function render() {
    document.getElementById("feed").innerHTML = getFeedHtml()
}

render()